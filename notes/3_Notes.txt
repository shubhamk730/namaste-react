- Root.render() replaces the data, it does not append it.
- npm run start = npm start
- JSX is not html, and it is not part of react.
- JSX is HTML like syntax not HTML.
- JSX is at the end converted to React.createElement().
- Single line jsx is fine for multiple lines wrap it in round brackets:-
    const jsxHeading = ( <h1 id="testHeading">
                            Namaste React using JSX
                        </h1> )
- Name of components always start with capital letter.
- Component Composition : Composing 2 or more components together, eg :rendering one inside other
- JSX prevents from scripting attacks automatically, by filtering it.
- Config Driven UI : UI is driven by a config, example, data controls UI on swiggy website.

- Why we need key in maps?
    - to prevent complete re render, also never use index as keys

- Component re renders on every state change

- Reconciliation Algorithm (also known as react fibre)
    - Came in React 16
    - Virtual DOM is representation of actual DOM (in form of object, just console.log(<Component />)).

- Diff Algorithm
    - finds out differences between 2 virtual DOMs.

- read Reconciliation : https://github.com/acdlite/react-fiber-architecture?tab=readme-ov-file

- Microservices architecture
    - Separation of concerns, single responsibility principle

- Whenever state variables update, react triggers a reconciliation cycle (re-renders the component).

- useEffect :-
    - By definition, it is called after every render of component, when dependency array is not present
        useEffect(() => {
            console.log("Running after every render");
        })
    - [] : On empty dependency array is called only once on initial render and just once
    - [dependency] : it renders whenever depenedency changes, and on initial render
    - try props and other things as props

- useState :-
    - Never create state outside of component, it will always throw error.
    - Creates local state variables in fn components.
    - Declare states on the top in the component.
    - Dont create state inside if else, loops and function.
    - Only create them on functional components on the top.

- useRouteError :-
    - provided by react router DOM.
    - Provides more information about error.
    
- Types of Routing in web app :-
    - Client side rendering
    - Server Side rendering
    
- Single Responsibility Principle
    - Any function, class, identity should have a single responsibility

- Dynamic bundling, Chunking, Lazy Loading, Code Splitting, On demand loading are all same.
- Try to make Logical Separation of code, eg in MakeMyTrip - Bundles can be for flights, holiday packages, homestyles etc.

- Ways to add CSS in react :-
    - CSS global or local 
    - Sass, Scss
    - Styled components
    - Tailwind
    
- PostCSS : tool to transform CSS with JS

- Higher Order Component : Does not change functionality of core component, but adds some additional property/ behaviour

- Context solves problem for props drilling.

- Two ways to use the context values (Supposing the Context name to be UserContext):-
    1. useContext(UserContext)
    2.  <UserContext.Provider>
            (data) => <h1>{data.name} is the current loggedin user.</h1>
        </UserContext.Provider>

- If you do not wish to use default value, you can provide value manually in the provider for the components:-
    <UserContext.Provider value={{loggedInUser: userInfo, setUserInfo}}>
      <div className="app">
          <Header />
          <Outlet />
      </div>
    </UserContext.Provider>

# Redux Toolkit steps:-
    - Install @reduxjs/toolkit and react-reduxjs
    - Build our store
    - Connect our store to App
    - Build Cart Slice
    - Dispatch an Action
    - Read data using Selector

- When using selector make sure to subscribe to right portion of the store, otherwise it can be performance issue.

- Earlier in old Redux stated Do Not Mutate the State, returning new state was mandatory.
- Now redux action, wemphasises that we have to mutate the state or return the new state.
- Changes will be not be reflected if we just change the reference. We need to modify the actual state.

- If redux state is not readable (proxy object), you can use console.log(current(state)). current function comes from reduxtoolkit.

- Read immer, redux docs.

- Earlier used middleware and thunks in redux, but now replaced by RTK query.

- Types of testing, developer can perform:-
    - Unit testing
    - Integration testing
    - End to End (e2e) testing

- Setting up testing in our app
    - Install React Testing Library
    - Installed jest
    - Installed Babel dependencies
    - Configure Babel
    - Configure Parcel Config file to disable default babel transpilation
    - Jest - npx jest --init
    - Install jsdom library (from testing library docs for jest 28  and above)
    - Install @babel/preset-react - to make JSX work in test cases
    - Include @babel/preset-react inside my babel config
    - npm i -D @testing-library/jest-dom

- Testing basics
    - render something -> query -> assertion

- Testing Higher Order Components (HOC)
- Tests can not make API calls or network calls. They only run in test environment.

- Class Based components

- Why use super(props), constructor(props), and why we cant use async fn as callback in useEffect?
- this.setState({}) will only update the values of the variables passed, not the other variables.

- Lifecycle Methods:-
- First constructor is called after class is instantiated, then render is called.

- https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/, refer to the diagram

- When initial render finishes and data is loaded with initial data, then :-
    - API call we made updates this.setState()
    - render method is called again with updated data
    - ComponentDidUpdate is called (not ComponentDidMount).
    - ComponentWillUnmount() runs before components is unmounted.